MODULE main
VAR
    --states
    state: {systemOff, safe, hazard, sensorFailure, powerFailure,hazardVoltageDrop};
    
    --outputs
    power: boolean;
    alarm: boolean;
    police: boolean;
    servicetechnican: boolean;
    batterybackup: boolean;
    lights: boolean;

    --inputs
    Button: boolean;
    Sensor:boolean;
    SensorMalfunction: boolean;
    deviceMalfunction: boolean;
    voltageDrop: boolean;

    --conditional counter
    counter: 0..10;
    
    
ASSIGN
    --state
    init(state):= systemOff;
    --inputs
    init(Button):= FALSE;
    init(Sensor):= FALSE;
    init(SensorMalfunction):= FALSE;
    init(deviceMalfunction):= FALSE;
    init(voltageDrop):= FALSE;
    --outputs
    init(power):= FALSE;
    init(alarm):= FALSE;
    init(police):= FALSE;
    init(servicetechnican):= FALSE;
    init(batterybackup):= FALSE;
    init(lights):= FALSE;

    --conditional counter
    init(counter):=0;

    next(state) := case
                        state=systemOff&Button&!Sensor&!SensorMalfunction&!deviceMalfunction&!voltageDrop :    safe; --system turned on
                        state=safe&!Button :        systemOff;--system turnedoff 
                        
                        state=safe&Sensor&!SensorMalfunction&Button&!deviceMalfunction&!voltageDrop :   hazard;--hazard noticed
                        state=hazard&!Button :      systemOff;--manual shutdown from hazard state
                        
                        state=safe&SensorMalfunction&!Sensor&Button&!deviceMalfunction&!voltageDrop:   sensorFailure;--sensor failed 
                        state=sensorFailure&!Button :   systemOff;--manual shutdown from sensor failure state
                        
                        state=safe&deviceMalfunction&!Sensor&!SensorMalfunction&Button&!voltageDrop: powerFailure; --device failed causing powerfailure
                        state=powerFailure&!Button: systemOff;--manual shutdown from power failure state

                        state=safe&!deviceMalfunction&!Sensor&!SensorMalfunction&Button&voltageDrop: hazardVoltageDrop; --hazard voltage drop noticed
                        state=hazardVoltageDrop&!Button: systemOff;--manual shutdown from hazard voltage drop state

                        TRUE: state;
                        esac;
    --inputs
    next(Sensor):= case
                        state=systemOff :   FALSE;
                        next(state)=systemOff :   FALSE;
                        next(state)=safe & counter=0 :  TRUE;       
                        next(state)=safe & !(counter=0) :  FALSE;           
                        next(state)=hazard: TRUE;
                        next(state)=sensorFailure: FALSE;
                        next(state)=powerFailure: FALSE; 
                        next(state)=hazardVoltageDrop: FALSE;  
                        TRUE: Sensor;
                        esac;

    next(deviceMalfunction):= case
                        state=systemOff :   FALSE;
                        next(state)=systemOff :   FALSE;
                        next(state)=safe & counter=1 :  TRUE;       
                        next(state)=safe & !(counter=1) :  FALSE;    
                        next(state)=hazard: FALSE;
                        next(state)=sensorFailure: FALSE;
                        next(state)=powerFailure: TRUE;   
                        next(state)=hazardVoltageDrop: FALSE;                
                        TRUE: deviceMalfunction;
                        esac;

    next(SensorMalfunction):= case
                        state=systemOff :   FALSE;
                        next(state)=systemOff :   FALSE;
                        next(state)=safe & counter=2 :  TRUE;       
                        next(state)=safe & !(counter=2) :  FALSE;    
                        next(state)=hazard: FALSE;
                        next(state)=sensorFailure: TRUE;   
                        next(state)=powerFailure: FALSE;  
                        next(state)=hazardVoltageDrop: FALSE;           
                        TRUE: SensorMalfunction;
                        esac;

    next(voltageDrop):= case
                        state=systemOff :   FALSE;
                        next(state)=systemOff :   FALSE;
                        next(state)=safe & counter=3 :  TRUE;       
                        next(state)=safe & !(counter=3) :  FALSE;           
                        next(state)=hazard: FALSE;
                        next(state)=sensorFailure: FALSE;
                        next(state)=powerFailure: FALSE;  
                        next(state)=hazardVoltageDrop: TRUE; 
                        TRUE: voltageDrop;
                        esac;                    

    next(power) := case
                        next(state) = systemOff:  FALSE;
                        next(state) = safe:       TRUE;
                        next(state) = hazard:     TRUE;
                        next(state) = sensorFailure: TRUE;
                        next(state) = powerFailure:  TRUE;
                        next(state)=hazardVoltageDrop: TRUE;
                        TRUE: power;
                        esac;
    --output
    next(alarm) := case
                        next(state) = systemOff:  FALSE;
                        next(state) = safe:       FALSE;
                        next(state) = hazard:     TRUE;
                        next(state) = sensorFailure: FALSE;
                        next(state) = powerFailure:  FALSE;
                        next(state) = hazardVoltageDrop:  TRUE;
                        TRUE: alarm;
                        esac;

    next(police) := case
                        next(state) = systemOff:  FALSE;
                        next(state) = safe:       FALSE;
                        next(state) = hazard:     TRUE;
                        next(state) = sensorFailure: FALSE;
                        next(state) = powerFailure:  FALSE;
                        next(state) = hazardVoltageDrop:  FALSE;
                        TRUE: police;
                        esac;

    next(servicetechnican) := case
                        next(state) = systemOff:  FALSE;
                        next(state) = safe:       FALSE;
                        next(state) = hazard:     FALSE;
                        next(state) = sensorFailure: TRUE;
                        next(state) = powerFailure:  TRUE;
                        next(state) = hazardVoltageDrop:  FALSE;
                        TRUE: servicetechnican;
                        esac;
    
    next(batterybackup) := case
                        next(state) = systemOff:  FALSE;
                        next(state) = safe:       FALSE;
                        next(state) = hazard:     FALSE;
                        next(state) = sensorFailure: FALSE;
                        next(state) = powerFailure:  FALSE;
                        next(state) = hazardVoltageDrop:  TRUE;
                        TRUE: batterybackup;
                        esac;

    next(lights) := case
                        next(state) = systemOff:  FALSE;
                        next(state) = safe:       FALSE;
                        next(state) = hazard:     TRUE;
                        next(state) = sensorFailure: FALSE;
                        next(state) = powerFailure:  FALSE;
                        next(state) = hazardVoltageDrop:  FALSE;
                        TRUE: lights;
                        esac;

  --conditional counter
    next(counter) := case
                        state  = safe&(Sensor|SensorMalfunction|deviceMalfunction|voltageDrop)&(counter<4): counter+1;
                        state = safe&(counter=4): 0;
                         TRUE: counter;
                         esac;                         
  --Testing
    SPEC AG ((state=systemOff&Button=TRUE)->AX(power=TRUE));
    SPEC AG ((state=safe&Sensor=TRUE&Button=TRUE)->AX(alarm=TRUE&lights=TRUE&police=TRUE));
    SPEC AG ((state=safe&SensorMalfunction=TRUE&Button=TRUE)->AX(servicetechnican=TRUE));
    SPEC AG ((state=safe&voltageDrop=TRUE&Button=TRUE)->AX(alarm=TRUE&batterybackup=TRUE));
    SPEC AG ((state=safe&deviceMalfunction=TRUE&Button=TRUE)->AX(servicetechnican=TRUE));
    SPEC AG ((state=safe&Button=FALSE)->AX(power=FALSE));
    SPEC AG ((state=hazard&Button=FALSE)->AX(power=FALSE));
    SPEC AG ((state=sensorFailure&Button=FALSE)->AX(power=FALSE));
    SPEC AG ((state=hazardVoltageDrop&Button=FALSE)->AX(power=FALSE));
    SPEC AG ((state=powerFailure&Button=FALSE)->AX(power=FALSE));



